// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_

#include <flutter_linux/flutter_linux.h>

G_BEGIN_DECLS

/**
 * CameraLinuxPlatformDeviceOrientation:
 * CAMERA_LINUX_PLATFORM_DEVICE_ORIENTATION_PORTRAIT_UP:
 * CAMERA_LINUX_PLATFORM_DEVICE_ORIENTATION_LANDSCAPE_LEFT:
 * CAMERA_LINUX_PLATFORM_DEVICE_ORIENTATION_PORTRAIT_DOWN:
 * CAMERA_LINUX_PLATFORM_DEVICE_ORIENTATION_LANDSCAPE_RIGHT:
 *
 */
typedef enum {
  CAMERA_LINUX_PLATFORM_DEVICE_ORIENTATION_PORTRAIT_UP = 0,
  CAMERA_LINUX_PLATFORM_DEVICE_ORIENTATION_LANDSCAPE_LEFT = 1,
  CAMERA_LINUX_PLATFORM_DEVICE_ORIENTATION_PORTRAIT_DOWN = 2,
  CAMERA_LINUX_PLATFORM_DEVICE_ORIENTATION_LANDSCAPE_RIGHT = 3
} CameraLinuxPlatformDeviceOrientation;

/**
 * CameraLinuxPlatformExposureMode:
 * CAMERA_LINUX_PLATFORM_EXPOSURE_MODE_AUTO:
 * CAMERA_LINUX_PLATFORM_EXPOSURE_MODE_LOCKED:
 *
 */
typedef enum {
  CAMERA_LINUX_PLATFORM_EXPOSURE_MODE_AUTO = 0,
  CAMERA_LINUX_PLATFORM_EXPOSURE_MODE_LOCKED = 1
} CameraLinuxPlatformExposureMode;

/**
 * CameraLinuxPlatformFlashMode:
 * CAMERA_LINUX_PLATFORM_FLASH_MODE_OFF:
 * CAMERA_LINUX_PLATFORM_FLASH_MODE_AUTO:
 * CAMERA_LINUX_PLATFORM_FLASH_MODE_ALWAYS:
 * CAMERA_LINUX_PLATFORM_FLASH_MODE_TORCH:
 *
 */
typedef enum {
  CAMERA_LINUX_PLATFORM_FLASH_MODE_OFF = 0,
  CAMERA_LINUX_PLATFORM_FLASH_MODE_AUTO = 1,
  CAMERA_LINUX_PLATFORM_FLASH_MODE_ALWAYS = 2,
  CAMERA_LINUX_PLATFORM_FLASH_MODE_TORCH = 3
} CameraLinuxPlatformFlashMode;

/**
 * CameraLinuxPlatformFocusMode:
 * CAMERA_LINUX_PLATFORM_FOCUS_MODE_AUTO:
 * CAMERA_LINUX_PLATFORM_FOCUS_MODE_LOCKED:
 *
 */
typedef enum {
  CAMERA_LINUX_PLATFORM_FOCUS_MODE_AUTO = 0,
  CAMERA_LINUX_PLATFORM_FOCUS_MODE_LOCKED = 1
} CameraLinuxPlatformFocusMode;

/**
 * CameraLinuxPlatformImageFormatGroup:
 * CAMERA_LINUX_PLATFORM_IMAGE_FORMAT_GROUP_RGB8:
 * CAMERA_LINUX_PLATFORM_IMAGE_FORMAT_GROUP_MONO8:
 *
 */
typedef enum {
  CAMERA_LINUX_PLATFORM_IMAGE_FORMAT_GROUP_RGB8 = 0,
  CAMERA_LINUX_PLATFORM_IMAGE_FORMAT_GROUP_MONO8 = 1
} CameraLinuxPlatformImageFormatGroup;

/**
 * CameraLinuxPlatformResolutionPreset:
 * CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_LOW:
 * CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_MEDIUM:
 * CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_HIGH:
 * CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_VERY_HIGH:
 * CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_ULTRA_HIGH:
 * CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_MAX:
 *
 */
typedef enum {
  CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_LOW = 0,
  CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_MEDIUM = 1,
  CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_HIGH = 2,
  CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_VERY_HIGH = 3,
  CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_ULTRA_HIGH = 4,
  CAMERA_LINUX_PLATFORM_RESOLUTION_PRESET_MAX = 5
} CameraLinuxPlatformResolutionPreset;

/**
 * CameraLinuxPlatformSize:
 *
 */

G_DECLARE_FINAL_TYPE(CameraLinuxPlatformSize, camera_linux_platform_size, CAMERA_LINUX, PLATFORM_SIZE, GObject)

/**
 * camera_linux_platform_size_new:
 * width: field in this object.
 * height: field in this object.
 *
 * Creates a new #PlatformSize object.
 *
 * Returns: a new #CameraLinuxPlatformSize
 */
CameraLinuxPlatformSize* camera_linux_platform_size_new(double width, double height);

/**
 * camera_linux_platform_size_get_width
 * @object: a #CameraLinuxPlatformSize.
 *
 * Gets the value of the width field of @object.
 *
 * Returns: the field value.
 */
double camera_linux_platform_size_get_width(CameraLinuxPlatformSize* object);

/**
 * camera_linux_platform_size_get_height
 * @object: a #CameraLinuxPlatformSize.
 *
 * Gets the value of the height field of @object.
 *
 * Returns: the field value.
 */
double camera_linux_platform_size_get_height(CameraLinuxPlatformSize* object);

/**
 * CameraLinuxPlatformCameraState:
 *
 */

G_DECLARE_FINAL_TYPE(CameraLinuxPlatformCameraState, camera_linux_platform_camera_state, CAMERA_LINUX, PLATFORM_CAMERA_STATE, GObject)

/**
 * camera_linux_platform_camera_state_new:
 * preview_size: field in this object.
 * exposure_mode: field in this object.
 * focus_mode: field in this object.
 * exposure_point_supported: field in this object.
 * focus_point_supported: field in this object.
 *
 * Creates a new #PlatformCameraState object.
 *
 * Returns: a new #CameraLinuxPlatformCameraState
 */
CameraLinuxPlatformCameraState* camera_linux_platform_camera_state_new(CameraLinuxPlatformSize* preview_size, CameraLinuxPlatformExposureMode exposure_mode, CameraLinuxPlatformFocusMode focus_mode, gboolean exposure_point_supported, gboolean focus_point_supported);

/**
 * camera_linux_platform_camera_state_get_preview_size
 * @object: a #CameraLinuxPlatformCameraState.
 *
 * The size of the preview, in pixels.
 *
 * Returns: the field value.
 */
CameraLinuxPlatformSize* camera_linux_platform_camera_state_get_preview_size(CameraLinuxPlatformCameraState* object);

/**
 * camera_linux_platform_camera_state_get_exposure_mode
 * @object: a #CameraLinuxPlatformCameraState.
 *
 * The default exposure mode
 *
 * Returns: the field value.
 */
CameraLinuxPlatformExposureMode camera_linux_platform_camera_state_get_exposure_mode(CameraLinuxPlatformCameraState* object);

/**
 * camera_linux_platform_camera_state_get_focus_mode
 * @object: a #CameraLinuxPlatformCameraState.
 *
 * The default focus mode
 *
 * Returns: the field value.
 */
CameraLinuxPlatformFocusMode camera_linux_platform_camera_state_get_focus_mode(CameraLinuxPlatformCameraState* object);

/**
 * camera_linux_platform_camera_state_get_exposure_point_supported
 * @object: a #CameraLinuxPlatformCameraState.
 *
 * Whether setting exposure points is supported.
 *
 * Returns: the field value.
 */
gboolean camera_linux_platform_camera_state_get_exposure_point_supported(CameraLinuxPlatformCameraState* object);

/**
 * camera_linux_platform_camera_state_get_focus_point_supported
 * @object: a #CameraLinuxPlatformCameraState.
 *
 * Whether setting focus points is supported.
 *
 * Returns: the field value.
 */
gboolean camera_linux_platform_camera_state_get_focus_point_supported(CameraLinuxPlatformCameraState* object);

/**
 * CameraLinuxPlatformPoint:
 *
 */

G_DECLARE_FINAL_TYPE(CameraLinuxPlatformPoint, camera_linux_platform_point, CAMERA_LINUX, PLATFORM_POINT, GObject)

/**
 * camera_linux_platform_point_new:
 * x: field in this object.
 * y: field in this object.
 *
 * Creates a new #PlatformPoint object.
 *
 * Returns: a new #CameraLinuxPlatformPoint
 */
CameraLinuxPlatformPoint* camera_linux_platform_point_new(double x, double y);

/**
 * camera_linux_platform_point_get_x
 * @object: a #CameraLinuxPlatformPoint.
 *
 * Gets the value of the x field of @object.
 *
 * Returns: the field value.
 */
double camera_linux_platform_point_get_x(CameraLinuxPlatformPoint* object);

/**
 * camera_linux_platform_point_get_y
 * @object: a #CameraLinuxPlatformPoint.
 *
 * Gets the value of the y field of @object.
 *
 * Returns: the field value.
 */
double camera_linux_platform_point_get_y(CameraLinuxPlatformPoint* object);

G_DECLARE_FINAL_TYPE(CameraLinuxMessageCodec, camera_linux_message_codec, CAMERA_LINUX, MESSAGE_CODEC, FlStandardMessageCodec)

G_DECLARE_FINAL_TYPE(CameraLinuxCameraApi, camera_linux_camera_api, CAMERA_LINUX, CAMERA_API, GObject)

G_DECLARE_FINAL_TYPE(CameraLinuxCameraApiResponseHandle, camera_linux_camera_api_response_handle, CAMERA_LINUX, CAMERA_API_RESPONSE_HANDLE, GObject)

/**
 * CameraLinuxCameraApiVTable:
 *
 * Table of functions exposed by CameraApi to be implemented by the API provider.
 */
typedef struct {
  void (*get_available_cameras_names)(CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*create)(const gchar* camera_name, CameraLinuxPlatformResolutionPreset resolution_preset, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*initialize)(int64_t camera_id, CameraLinuxPlatformImageFormatGroup image_format, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*get_texture_id)(int64_t camera_id, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*dispose)(int64_t camera_id, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*take_picture)(int64_t camera_id, const gchar* path, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*start_video_recording)(int64_t camera_id, gboolean enable_stream, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*stop_video_recording)(int64_t camera_id, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*set_exposure_mode)(int64_t camera_id, CameraLinuxPlatformExposureMode mode, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*set_focus_mode)(int64_t camera_id, CameraLinuxPlatformFocusMode mode, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
  void (*set_image_format_group)(int64_t camera_id, CameraLinuxPlatformImageFormatGroup image_format_group, CameraLinuxCameraApiResponseHandle* response_handle, gpointer user_data);
} CameraLinuxCameraApiVTable;

/**
 * camera_linux_camera_api_set_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 * @vtable: implementations of the methods in this API.
 * @user_data: (closure): user data to pass to the functions in @vtable.
 * @user_data_free_func: (allow-none): a function which gets called to free @user_data, or %NULL.
 *
 * Connects the method handlers in the CameraApi API.
 */
void camera_linux_camera_api_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const CameraLinuxCameraApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func);

/**
 * camera_linux_camera_api_clear_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 *
 * Clears the method handlers in the CameraApi API.
 */
void camera_linux_camera_api_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix);

/**
 * camera_linux_camera_api_respond_get_available_cameras_names:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @return_value: location to write the value returned by this method.
 *
 * Responds to CameraApi.getAvailableCamerasNames. 
 */
void camera_linux_camera_api_respond_get_available_cameras_names(CameraLinuxCameraApiResponseHandle* response_handle, FlValue* return_value);

/**
 * camera_linux_camera_api_respond_error_get_available_cameras_names:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.getAvailableCamerasNames. 
 */
void camera_linux_camera_api_respond_error_get_available_cameras_names(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_create:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @return_value: location to write the value returned by this method.
 *
 * Responds to CameraApi.create. 
 */
void camera_linux_camera_api_respond_create(CameraLinuxCameraApiResponseHandle* response_handle, int64_t return_value);

/**
 * camera_linux_camera_api_respond_error_create:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.create. 
 */
void camera_linux_camera_api_respond_error_create(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_initialize:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 *
 * Responds to CameraApi.initialize. 
 */
void camera_linux_camera_api_respond_initialize(CameraLinuxCameraApiResponseHandle* response_handle);

/**
 * camera_linux_camera_api_respond_error_initialize:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.initialize. 
 */
void camera_linux_camera_api_respond_error_initialize(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_get_texture_id:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @return_value: location to write the value returned by this method.
 *
 * Responds to CameraApi.getTextureId. 
 */
void camera_linux_camera_api_respond_get_texture_id(CameraLinuxCameraApiResponseHandle* response_handle, int64_t* return_value);

/**
 * camera_linux_camera_api_respond_error_get_texture_id:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.getTextureId. 
 */
void camera_linux_camera_api_respond_error_get_texture_id(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_dispose:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 *
 * Responds to CameraApi.dispose. 
 */
void camera_linux_camera_api_respond_dispose(CameraLinuxCameraApiResponseHandle* response_handle);

/**
 * camera_linux_camera_api_respond_error_dispose:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.dispose. 
 */
void camera_linux_camera_api_respond_error_dispose(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_take_picture:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 *
 * Responds to CameraApi.takePicture. 
 */
void camera_linux_camera_api_respond_take_picture(CameraLinuxCameraApiResponseHandle* response_handle);

/**
 * camera_linux_camera_api_respond_error_take_picture:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.takePicture. 
 */
void camera_linux_camera_api_respond_error_take_picture(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_start_video_recording:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 *
 * Responds to CameraApi.startVideoRecording. 
 */
void camera_linux_camera_api_respond_start_video_recording(CameraLinuxCameraApiResponseHandle* response_handle);

/**
 * camera_linux_camera_api_respond_error_start_video_recording:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.startVideoRecording. 
 */
void camera_linux_camera_api_respond_error_start_video_recording(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_stop_video_recording:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @return_value: location to write the value returned by this method.
 *
 * Responds to CameraApi.stopVideoRecording. 
 */
void camera_linux_camera_api_respond_stop_video_recording(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* return_value);

/**
 * camera_linux_camera_api_respond_error_stop_video_recording:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.stopVideoRecording. 
 */
void camera_linux_camera_api_respond_error_stop_video_recording(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_set_exposure_mode:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 *
 * Responds to CameraApi.setExposureMode. 
 */
void camera_linux_camera_api_respond_set_exposure_mode(CameraLinuxCameraApiResponseHandle* response_handle);

/**
 * camera_linux_camera_api_respond_error_set_exposure_mode:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.setExposureMode. 
 */
void camera_linux_camera_api_respond_error_set_exposure_mode(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_set_focus_mode:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 *
 * Responds to CameraApi.setFocusMode. 
 */
void camera_linux_camera_api_respond_set_focus_mode(CameraLinuxCameraApiResponseHandle* response_handle);

/**
 * camera_linux_camera_api_respond_error_set_focus_mode:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.setFocusMode. 
 */
void camera_linux_camera_api_respond_error_set_focus_mode(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * camera_linux_camera_api_respond_set_image_format_group:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 *
 * Responds to CameraApi.setImageFormatGroup. 
 */
void camera_linux_camera_api_respond_set_image_format_group(CameraLinuxCameraApiResponseHandle* response_handle);

/**
 * camera_linux_camera_api_respond_error_set_image_format_group:
 * @response_handle: a #CameraLinuxCameraApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to CameraApi.setImageFormatGroup. 
 */
void camera_linux_camera_api_respond_error_set_image_format_group(CameraLinuxCameraApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(CameraLinuxCameraEventApiInitializedResponse, camera_linux_camera_event_api_initialized_response, CAMERA_LINUX, CAMERA_EVENT_API_INITIALIZED_RESPONSE, GObject)

/**
 * camera_linux_camera_event_api_initialized_response_is_error:
 * @response: a #CameraLinuxCameraEventApiInitializedResponse.
 *
 * Checks if a response to CameraEventApi.initialized is an error.
 *
 * Returns: a %TRUE if this response is an error.
 */
gboolean camera_linux_camera_event_api_initialized_response_is_error(CameraLinuxCameraEventApiInitializedResponse* response);

/**
 * camera_linux_camera_event_api_initialized_response_get_error_code:
 * @response: a #CameraLinuxCameraEventApiInitializedResponse.
 *
 * Get the error code for this response.
 *
 * Returns: an error code or %NULL if not an error.
 */
const gchar* camera_linux_camera_event_api_initialized_response_get_error_code(CameraLinuxCameraEventApiInitializedResponse* response);

/**
 * camera_linux_camera_event_api_initialized_response_get_error_message:
 * @response: a #CameraLinuxCameraEventApiInitializedResponse.
 *
 * Get the error message for this response.
 *
 * Returns: an error message.
 */
const gchar* camera_linux_camera_event_api_initialized_response_get_error_message(CameraLinuxCameraEventApiInitializedResponse* response);

/**
 * camera_linux_camera_event_api_initialized_response_get_error_details:
 * @response: a #CameraLinuxCameraEventApiInitializedResponse.
 *
 * Get the error details for this response.
 *
 * Returns: (allow-none): an error details or %NULL.
 */
FlValue* camera_linux_camera_event_api_initialized_response_get_error_details(CameraLinuxCameraEventApiInitializedResponse* response);

G_DECLARE_FINAL_TYPE(CameraLinuxCameraEventApiTextureIdResponse, camera_linux_camera_event_api_texture_id_response, CAMERA_LINUX, CAMERA_EVENT_API_TEXTURE_ID_RESPONSE, GObject)

/**
 * camera_linux_camera_event_api_texture_id_response_is_error:
 * @response: a #CameraLinuxCameraEventApiTextureIdResponse.
 *
 * Checks if a response to CameraEventApi.textureId is an error.
 *
 * Returns: a %TRUE if this response is an error.
 */
gboolean camera_linux_camera_event_api_texture_id_response_is_error(CameraLinuxCameraEventApiTextureIdResponse* response);

/**
 * camera_linux_camera_event_api_texture_id_response_get_error_code:
 * @response: a #CameraLinuxCameraEventApiTextureIdResponse.
 *
 * Get the error code for this response.
 *
 * Returns: an error code or %NULL if not an error.
 */
const gchar* camera_linux_camera_event_api_texture_id_response_get_error_code(CameraLinuxCameraEventApiTextureIdResponse* response);

/**
 * camera_linux_camera_event_api_texture_id_response_get_error_message:
 * @response: a #CameraLinuxCameraEventApiTextureIdResponse.
 *
 * Get the error message for this response.
 *
 * Returns: an error message.
 */
const gchar* camera_linux_camera_event_api_texture_id_response_get_error_message(CameraLinuxCameraEventApiTextureIdResponse* response);

/**
 * camera_linux_camera_event_api_texture_id_response_get_error_details:
 * @response: a #CameraLinuxCameraEventApiTextureIdResponse.
 *
 * Get the error details for this response.
 *
 * Returns: (allow-none): an error details or %NULL.
 */
FlValue* camera_linux_camera_event_api_texture_id_response_get_error_details(CameraLinuxCameraEventApiTextureIdResponse* response);

G_DECLARE_FINAL_TYPE(CameraLinuxCameraEventApiErrorResponse, camera_linux_camera_event_api_error_response, CAMERA_LINUX, CAMERA_EVENT_API_ERROR_RESPONSE, GObject)

/**
 * camera_linux_camera_event_api_error_response_is_error:
 * @response: a #CameraLinuxCameraEventApiErrorResponse.
 *
 * Checks if a response to CameraEventApi.error is an error.
 *
 * Returns: a %TRUE if this response is an error.
 */
gboolean camera_linux_camera_event_api_error_response_is_error(CameraLinuxCameraEventApiErrorResponse* response);

/**
 * camera_linux_camera_event_api_error_response_get_error_code:
 * @response: a #CameraLinuxCameraEventApiErrorResponse.
 *
 * Get the error code for this response.
 *
 * Returns: an error code or %NULL if not an error.
 */
const gchar* camera_linux_camera_event_api_error_response_get_error_code(CameraLinuxCameraEventApiErrorResponse* response);

/**
 * camera_linux_camera_event_api_error_response_get_error_message:
 * @response: a #CameraLinuxCameraEventApiErrorResponse.
 *
 * Get the error message for this response.
 *
 * Returns: an error message.
 */
const gchar* camera_linux_camera_event_api_error_response_get_error_message(CameraLinuxCameraEventApiErrorResponse* response);

/**
 * camera_linux_camera_event_api_error_response_get_error_details:
 * @response: a #CameraLinuxCameraEventApiErrorResponse.
 *
 * Get the error details for this response.
 *
 * Returns: (allow-none): an error details or %NULL.
 */
FlValue* camera_linux_camera_event_api_error_response_get_error_details(CameraLinuxCameraEventApiErrorResponse* response);

/**
 * CameraLinuxCameraEventApi:
 *
 * Handler for native callbacks that are tied to a specific camera ID.
 *
 * This is intended to be initialized with the camera ID as a suffix.
 */

G_DECLARE_FINAL_TYPE(CameraLinuxCameraEventApi, camera_linux_camera_event_api, CAMERA_LINUX, CAMERA_EVENT_API, GObject)

/**
 * camera_linux_camera_event_api_new:
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 *
 * Creates a new object to access the CameraEventApi API.
 *
 * Returns: a new #CameraLinuxCameraEventApi
 */
CameraLinuxCameraEventApi* camera_linux_camera_event_api_new(FlBinaryMessenger* messenger, const gchar* suffix);

/**
 * camera_linux_camera_event_api_initialized:
 * @api: a #CameraLinuxCameraEventApi.
 * @initial_state: parameter for this method.
 * @cancellable: (allow-none): a #GCancellable or %NULL.
 * @callback: (scope async): (allow-none): a #GAsyncReadyCallback to call when the call is complete or %NULL to ignore the response.
 * @user_data: (closure): user data to pass to @callback.
 *
 * Called when the camera is inialitized for use.
 */
void camera_linux_camera_event_api_initialized(CameraLinuxCameraEventApi* api, CameraLinuxPlatformCameraState* initial_state, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data);

/**
 * camera_linux_camera_event_api_initialized_finish:
 * @api: a #CameraLinuxCameraEventApi.
 * @result: a #GAsyncResult.
 * @error: (allow-none): #GError location to store the error occurring, or %NULL to ignore.
 *
 * Completes a camera_linux_camera_event_api_initialized() call.
 *
 * Returns: a #CameraLinuxCameraEventApiInitializedResponse or %NULL on error.
 */
CameraLinuxCameraEventApiInitializedResponse* camera_linux_camera_event_api_initialized_finish(CameraLinuxCameraEventApi* api, GAsyncResult* result, GError** error);

/**
 * camera_linux_camera_event_api_texture_id:
 * @api: a #CameraLinuxCameraEventApi.
 * @texture_id: parameter for this method.
 * @cancellable: (allow-none): a #GCancellable or %NULL.
 * @callback: (scope async): (allow-none): a #GAsyncReadyCallback to call when the call is complete or %NULL to ignore the response.
 * @user_data: (closure): user data to pass to @callback.
 *
 */
void camera_linux_camera_event_api_texture_id(CameraLinuxCameraEventApi* api, int64_t texture_id, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data);

/**
 * camera_linux_camera_event_api_texture_id_finish:
 * @api: a #CameraLinuxCameraEventApi.
 * @result: a #GAsyncResult.
 * @error: (allow-none): #GError location to store the error occurring, or %NULL to ignore.
 *
 * Completes a camera_linux_camera_event_api_texture_id() call.
 *
 * Returns: a #CameraLinuxCameraEventApiTextureIdResponse or %NULL on error.
 */
CameraLinuxCameraEventApiTextureIdResponse* camera_linux_camera_event_api_texture_id_finish(CameraLinuxCameraEventApi* api, GAsyncResult* result, GError** error);

/**
 * camera_linux_camera_event_api_error:
 * @api: a #CameraLinuxCameraEventApi.
 * @message: parameter for this method.
 * @cancellable: (allow-none): a #GCancellable or %NULL.
 * @callback: (scope async): (allow-none): a #GAsyncReadyCallback to call when the call is complete or %NULL to ignore the response.
 * @user_data: (closure): user data to pass to @callback.
 *
 * Called when an error occurs in the camera.
 *
 * This should be used for errors that occur outside of the context of
 * handling a specific HostApi call, such as during streaming.
 */
void camera_linux_camera_event_api_error(CameraLinuxCameraEventApi* api, const gchar* message, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data);

/**
 * camera_linux_camera_event_api_error_finish:
 * @api: a #CameraLinuxCameraEventApi.
 * @result: a #GAsyncResult.
 * @error: (allow-none): #GError location to store the error occurring, or %NULL to ignore.
 *
 * Completes a camera_linux_camera_event_api_error() call.
 *
 * Returns: a #CameraLinuxCameraEventApiErrorResponse or %NULL on error.
 */
CameraLinuxCameraEventApiErrorResponse* camera_linux_camera_event_api_error_finish(CameraLinuxCameraEventApi* api, GAsyncResult* result, GError** error);

G_END_DECLS

#endif  // PIGEON_MESSAGES_G_H_
